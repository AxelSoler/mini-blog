// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  comments  Comment[]
  reactions Reaction[]

  // Foreign key
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  email    String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-many relation
  posts     Post[]
  comments  Comment[]
  reactions Reaction[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  
  reactions Reaction[]

  @@unique([userId, postId]) // clave Ãºnica para un comentario por usuario y post
}

model Reaction {
  id        Int      @id @default(autoincrement())
  emoji     String
  createdAt DateTime @default(now())

  // User
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  // Post or Comment
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?

  @@unique([userId, postId, emoji])
  @@unique([userId, commentId, emoji])
}
