<div
  x-data="{ showEditModal: false, showDeleteModal: false }"
  class="bg-white shadow p-4 rounded"
>
  <div class="flex flex-col md:flex-row justify-between border-b pb-2 mb-2 gap-2">
    <a href="/posts/<%= post.id %>" class="block hover:bg-gray-100 p-2 rounded w-full">
      <h2 class="text-xl font-bold"><%= post.title %></h2>
      <p class="text-sm text-gray-600">by <%= post.user.username %> on <%= post.createdAt.toLocaleString() %></p>
      <div class="flex flex-col">
        <p class="line-clamp-3">
          <%= post.content %>
        </p>
      </div>
    </a>
    <% if (currentUser && currentUser.id === post.userId) { %>
      <div class="flex gap-2 items-start">
        <button
          @click="showEditModal = true"
          class="bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded"
        >
          Edit
        </button>

        <button
          @click="showDeleteModal = true"
          class="bg-red-600 hover:bg-red-700 text-white px-2 py-1 rounded"
        >
          Delete
        </button>
      </div>
    <% } %>
  </div>

  <div class="flex gap-2 mt-2" data-post-id="<%= post.id %>">
    <% const emojis = ['👍','❤️','😂','😮','🎉']; %>
    <% emojis.forEach(e => { 
      const count = post.reactions.filter(r => r.emoji === e).length;
      const reacted = currentUser && post.reactions.some(r => r.emoji === e && r.userId === currentUser.id);
    %>
      <button 
        class="reaction-btn text-xl <%= reacted ? 'opacity-100' : 'opacity-50' %> hover:opacity-100 transition"
        data-type="post"
        data-emoji="<%= e %>"
        data-id="<%= post.id %>"
        <%= !currentUser ? 'disabled' : '' %>
      ><%= e %> <span class="count"><%= count || '' %></span></button>
    <% }) %>
  </div>

  <div>
    <h3 class="font-bold">Comments</h3>
    <ul>
      <% post.comments.forEach(comment => { %>
        <li>
          <strong><%= comment.user.username %>:</strong> <%= comment.content %>
          <div class="flex gap-1 ml-2" data-comment-id="<%= comment.id %>">
            <% emojis.forEach(e => { 
              const count = comment.reactions.filter(r => r.emoji === e).length;
              const reacted = currentUser && comment.reactions.some(r => r.emoji === e && r.userId === currentUser.id);
            %>
              <button 
                class="reaction-btn text-sm <%= reacted ? 'opacity-100' : 'opacity-50' %> hover:opacity-100 transition"
                data-type="comment"
                data-emoji="<%= e %>"
                data-id="<%= comment.id %>"
                <%= !currentUser ? 'disabled' : '' %>
              ><%= e %> <span class="count"><%= count || '' %></span></button>
            <% }) %>
          </div>
        </li>
      <% }) %>
    </ul>
  
    <% const userComment = post.comments.find(c => c.userId === (currentUser && currentUser.id)); %>
  
    <% if (currentUser && !userComment) { %>
      <form action="/posts/<%= post.id %>/comments" method="POST" class="mt-2 flex flex-col gap-2">
        <textarea name="content" required placeholder="Write your comment here" class="border p-2 w-full rounded"></textarea>
        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded ml-auto">Add Comment</button>
      </form>
    <% } else if (!currentUser) { %>
      <p class="text-red-600 mt-2 font-bold">Please log in to comment.</p>
    <% } else { %>
      <p class="text-red-600 mt-2 font-bold">You have already commented on this post.</p>
    <% } %>
  </div>

  <!-- Edit Modal -->
  <div
    x-show="showEditModal"
    x-cloak
    x-transition
    class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 px-4"
  >
    <div class="bg-white p-6 rounded w-full max-w-96 relative">
      <h3 class="text-lg font-semibold mb-4">Edit Post</h3>
      <button
        @click="showEditModal = false"
        class="text-gray-500 hover:text-gray-700 text-4xl font-bold absolute top-2 right-4"
      >
        &times;
      </button>
      <form
        action="/edit/<%= post.id %>?_method=PUT"
        method="POST"
        class="space-y-2"
      >
        <input
          type="text"
          name="title"
          value="<%= post.title %>"
          class="border p-2 w-full"
          required
        />
        <textarea name="content" class="border p-2 w-full" required><%= post.content %></textarea>
        <div class="flex justify-end gap-2">
          <button
            type="button"
            @click="showEditModal = false"
            class="px-4 py-2 bg-gray-300 rounded"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-blue-600 text-white rounded"
          >
            Save
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Delete Modal -->
  <div
    x-show="showDeleteModal"
    x-cloak
    x-transition
    class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50"
  >
    <div class="bg-white p-6 rounded w-96 relative">
      <h3 class="text-lg font-semibold mb-4">Are you sure?</h3>
      <p class="mb-4">This action will permanently delete the post.</p>
      <button
        @click="showDeleteModal = false"
        class="text-gray-500 hover:text-gray-700 text-4xl font-bold absolute top-2 right-4"
      >
        &times;
      </button>
      <form
        action="/delete/<%= post.id %>?_method=DELETE"
        method="POST"
        class="flex justify-end gap-2"
      >
        <button
          type="button"
          @click="showDeleteModal = false"
          class="px-4 py-2 bg-gray-300 rounded"
        >
          Cancel
        </button>
        <button
          type="submit"
          class="px-4 py-2 bg-red-600 text-white rounded"
        >
          Delete
        </button>
      </form>
    </div>
  </div>
</div>

<script>
document.querySelectorAll('.reaction-btn').forEach(btn => {
  btn.addEventListener('click', async (e) => {
    e.preventDefault();
    const emoji = btn.dataset.emoji;
    const type = btn.dataset.type;
    const id = btn.dataset.id;

    const payload = { emoji };
    if (type === 'post') payload.postId = id;
    if (type === 'comment') payload.commentId = id;

    const res = await fetch('/reactions/toggle', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    const data = await res.json();

    if (data.added || data.removed) {
      const countSpan = btn.querySelector('.count');
      let count = parseInt(countSpan.textContent) || 0;
      count = data.added ? count + 1 : count - 1;
      countSpan.textContent = count > 0 ? count : '';

      btn.classList.toggle('opacity-100', data.added);
      btn.classList.toggle('opacity-50', !data.added);
    }
  });
});
</script>
